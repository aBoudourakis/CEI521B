run ./.conda/envs/CEI521A1/main.py

const axios = require('axios');

module.exports = async function (context, req) {
    context.log('JavaScript HTTP trigger function processed a request.');
    const targetLocation = req.query.city || 'Limassol';
    const weatherDataResponse = await axios.get(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${targetLocation}?unitGroup=metric&key=ACRB86QG8FL6QRU43EGJ26W8V&contentType=csv`);
    // console.log('weatherDataResponse', weatherDataResponse.data);
    context.res = {
        // status: 200, /* Defaults to 200 */
        body: weatherDataResponse
    };
}


====== default google functions py =======

def xesreader(request):
    '''Responds to any HTTP request.
    Args:
        request (flask.Request): HTTP request object.
    Returns:
        The response text or any set of values that can be turned into a
        Response object using
        `make_response <http://flask.pocoo.org/docs/1.0/api/#flask.Flask.make_response>`.
    '''
    request_json = request.get_json()
    if request.args and 'message' in request.args:
        return request.args.get('message')
    elif request_json and 'message' in request_json:
        return request_json['message']
    else:
        return f'XES reader test!'


====== XES SAMPLE stringified =======

{"data":"<?xml version='1.0' encoding='utf-8' ?>\n<log xes.version='1849-2016' xes.features='nested-attributes' xmlns='http://www.xes-standard.org/'>\n\t<extension name='Organizational' prefix='org' uri='http://www.xes-standard.org/org.xesext' />\n\t<extension name='Time' prefix='time' uri='http://www.xes-standard.org/time.xesext' />\n\t<extension name='Concept' prefix='concept' uri='http://www.xes-standard.org/concept.xesext' />\n\t<string key='origin' value='csv' />\n\t<trace>\n\t\t<string key='concept:name' value='patient 0' />\n\t\t<event>\n\t\t\t<string key='concept:name' value=' First consult' />\n\t\t\t<string key='org:resource' value=' Dr. Anna' />\n\t\t\t<date key='time:timestamp' value='2017-01-02T11:40:11' />\n\t\t</event>\n\t\t<event>\n\t\t\t<string key='concept:name' value=' Blood test' />\n\t\t\t<string key='org:resource' value=' Lab' />\n\t\t\t<date key='time:timestamp' value='2017-01-02T12:47:33' />\n\t\t</event>\n\t\t<event>\n\t\t\t<string key='concept:name' value=' Physical test' />\n\t\t\t<string key='org:resource' value=' Nurse Jesse' />\n\t\t\t<date key='time:timestamp' value='2017-01-02T12:53:50' />\n\t\t</event>\n    </trace>\n</log>"}

===== recursive backup =====

recur_count = 0


def calculate_factorial(n):
    global recur_count
    recur_count += 1
    if n == 1:
        return n
    else:
        return n * calculate_factorial(n - 1)


# number_input = 7

number_input = input('Εισάξατε αριθμό για να υπολογίσετε το παραγοντικό του: ')
number_input = int(number_input)

# check if the number is negative
if number_input < 0:
    print("Το παραγοντικό δεν υφίσταται για αρνητικούς αριθμούς")
elif number_input == 0:
    print('το παραγοντικό του 0 είναι 1 και η συνάρτηση καλέστηκε ' + 1 + 'φορά')
else:
    print(
        'το παραγοντικό του ' + str(number_input) + ' είναι ' + str(
            calculate_factorial(number_input)) + ' και η συνάρτηση καλέστηκε ' + str(recur_count) + ' φορές')



======== take 1 ========

import sys
from urllib import request
from urllib import error

recur_count = 0


def recursive_factorial_function(current_number):
    global recur_count
    recur_count += 1
    if current_number == 1:
        return n
    else:
        return n * calculate_factorial(n - 1)


# number_input = 7

number_input = input('Εισάξατε αριθμό για να υπολογίσετε το παραγοντικό του: ')
number_input = int(number_input)

# check if the number is negative
if number_input < 0:
    print("Το παραγοντικό δεν υφίσταται για αρνητικούς αριθμούς")
elif number_input == 0:
    print('το παραγοντικό του 0 είναι 1 και η συνάρτηση καλέστηκε ' + 1 + 'φορά')
else:
    print(
        'το παραγοντικό του ' + str(number_input) + ' είναι ' + str(
            calculate_factorial(number_input)) + ' και η συνάρτηση καλέστηκε ' + str(recur_count) + ' φορές')



# CEI521B

Cei 521 assignment

### Διδικασία

- εγγραφή σε streamlit
- έρευνα για διαθέσιμα δωρεάν web services
- δημιουργία repository στο github
- σύνταξη κώδικα

### Δωρεάν web services Widgets

| <div style="text-align: left">1. **Πρόγνωση θερμοκρασίας**</div> <div style="text-align: left"><small>*για Λεμεσό,
Κύπρο τις επόμενες 10 ημέρες*<small></div> |
|---------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - weather.visualcrossing.com                                                                                                                                  |
| - λήψη δεδομένων σε csv μορφή και επεξεργασία τους για προβολή δεδομένων σε πίνακα από data frame                                                             |

| <div style="text-align: left">2. **Kρυπτονόμισμα**</div> <div style="text-align: left"><small>*προβολή νομισμάτων,
αξία και διακύμανση αυτών* </small></div> |
|--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - api.coinstats.app                                                                                                                                          |
| - λήψη δεδομένων σε μορφή json και εξαγωγή πληροφοριών σε dictionary                                                                                         |
| - επεξεργασία και μετατροπή σε data frame με τα επιθυμητά πεδία                                                                                              |
| - μετατροπή τιμών σε φιλική για τον χρήστη μορφή                                                                                                             |

| <div style="text-align: left">2. **Ποιότητα αέρα**</div> <div style="text-align: left"><small>*προβολή ποιότητας αέρα(
ρύπων) για την περιοχή του χρήστη* </small></div> |
|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - api.waqi.info                                                                                                                                                         |
| - λήψη δεδομένων σε μορφή json και εξαγωγή πληροφοριών σε dictionary                                                                                                    |
| - επεξεργασία και μετατροπή σε data frame με τα επιθυμητά πεδία                                                                                                         |

### web services Widgets μέσω serverless functions

| <div style="text-align: left">1. **Πρόγνωση θερμοκρασίας για περιοχή**</div> <div style="text-align: left"><small>*
Πρόγνωση θερμοκρασίας για περιοχή προσδιοριζομένη από τον χρήστη*<small></div> |
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - weather.visualcrossing.com                                                                                                                                                                      |
| - λήψη επιλεγμένης περιοχής από μια λίστα με διαθέσιμες πόλεις                                                                                                                                    |
| - εκτέλεση κλήσης αίτησης σε υπηρεσία από Azure functions που καλεί άλλον παροχέα υπηρεσιών για λήψη δεδομένων βάσει της παρεχόμενης τοποθεσίας                                                   |
| - λειτουργία σαν Mediator Service (wrapper/proxy)                                                                                                                                                 |

| <div style="text-align: left">1. **Υπολογισμός Δείκτη Μάζας Σώματος (
BMI)**</div> <div style="text-align: left"><small>*υπολογιστμός BMI βάσει πληροφοριών (ύψος και βάρος)*<small></div> |
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - εκτέλεση μιας μεθόδου στο Azure functions με παραμέτρους ύψος και βάρος για υπολογισμό του BMI ως BMI = weight/ height² |

| <div style="text-align: left">1. **Παραγοντικό**</div> <div style="text-align: left"><small>*υπολογισμός παραγοντικού
ενός ακαιραίου δοσμένου από την χρήστη*<small></div> |
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| - εκτέλεση μιας μεθόδου γραμμένη στο Azure functions με παράμετρο ένα ακαίρεο όπου υπολογίζεται το παραγοντικό του καθώς και ο αριθμός αναδρομικών εκτελέσεων |
| - Η πληροφορία για τον αριθμό επαναλήψεων για τον υπολογισμό του παραγοντικού είναι μαθηματικά περιττή καθώς ως δεδομένο θα ισούτε με τον δοθέντα αριθμό, αλλά συμπεριλήφθηκε για προβολή της δυνατότητας παρακολούθησης των επαναλήψεων που θα μπορούσαν να φανούν χρήσιμα για τον υπολογισμό/εκτίμιση εκτέλεσης παρόμοιας μεθόδου σε εφαρμογές μηχανικής μάθησης.*<small></div> |

